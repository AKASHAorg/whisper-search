{"version":3,"sources":["../../src/search.js"],"names":["runService","lvlDb","installFilter","web3","filter","shh","topics","to","watch","err","message","payload","toUtf8","jsonPayload","JSON","parse","console","log","text","response","Set","search","query","AND","on","data","add","document","entryId","results","Array","from","post","identity","ttl","fromDecimal","error","sent","resp","newIdentity","address"],"mappings":";;;;;kBA4CwBA,U;;AA5CxB;;AACA;;AAEA,IAAIC,cAAJ;AACA,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,IAAD,EAAU;AAC9B,MAAMC,SAASD,KAAKE,GAAL,CAASD,MAAT,CAAgB,EAAEE,QAAQ,0BAAV,EAA4BC,IAAI,4BAAhC,EAAhB,CAAf;AACAH,SAAOI,KAAP,CAAa,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC7B,QAAMC,UAAUR,KAAKS,MAAL,CAAYF,QAAQC,OAApB,CAAhB;AACA,QAAIE,oBAAJ;AACA,QAAG;AACDA,oBAAcC,KAAKC,KAAL,CAAWJ,OAAX,CAAd;AACD,KAFD,CAEC,OAAOF,GAAP,EAAY;AACXO,cAAQC,GAAR,CAAYR,GAAZ;AACD;AACD,QAAG,CAACI,WAAD,IAAgB,CAACA,YAAYK,IAAhC,EAAqC;AAAC;AAAQ;AAC9C,QAAIC,WAAW,IAAIC,GAAJ,EAAf;AACAnB,UAAMoB,MAAN,CAAa,EAAEC,OAAO,EAAEC,KAAK,EAAE,KAAK,CAACV,YAAYK,IAAb,CAAP,EAAP,EAAT,EAAb,EACGM,EADH,CACM,MADN,EACc,UAACC,IAAD,EAAU;AACpBN,eAASO,GAAT,CAAaD,KAAKE,QAAL,CAAcC,OAA3B;AACD,KAHH,EAGKJ,EAHL,CAGQ,KAHR,EAGe,YAAM;AACnB,UAAMK,UAAUC,MAAMC,IAAN,CAAWZ,QAAX,CAAhB;AACA;AACD,KAND;;AAQA,QAAI,CAACV,GAAL,EAAU;AACRN,WAAKE,GAAL,CACG2B,IADH,CACQ;AACJD,cAAME,QADF;AAEJ1B,YAAIG,QAAQqB,IAFR;AAGJzB,gBAAQ,0BAHJ;AAIJK,iBAASD,QAAQC,OAJb;AAKJuB,aAAK/B,KAAKgC,WAAL,CAAiB,EAAjB;AALD,OADR,EAOK,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAClB,YAAIA,IAAJ,EAAU;AACRrB,kBAAQC,GAAR,CAAY,qBAAZ,EAAmCP,QAAQqB,IAA3C;AACD,SAFD,MAEO;AACLf,kBAAQoB,KAAR,CAAc,iBAAd,EAAiCA,KAAjC;AACD;AACF,OAbH;AAcD;AACF,GAlCD;AAmCA,SAAO,IAAP;AACD,CAtCD;;AAwCe,SAASpC,UAAT,GAAuB;AACpC,MAAMG,OAAO,wBAAb;;AAGA,MAAG,4BAAH,EAAiB;AACf,8BAAS,UAACM,GAAD,EAAM6B,IAAN,EAAe;AACtBrC,cAAQqC,IAAR;AACD,KAFD;AAGA,WAAOpC,cAAcC,IAAd,CAAP;AACD;;AAEDA,OAAKE,GAAL,CAASkC,WAAT,CAAqB,UAAC9B,GAAD,EAAM+B,OAAN,EAAkB;AACrCxB,YAAQC,GAAR,CAAY,mBAAZ,EAAiCuB,OAAjC;AACA,+BAAYA,OAAZ;AACA,WAAOtC,eAAP;AACD,GAJD;AAKD","file":"search.js","sourcesContent":["import { getWeb3, getIdentity, setIdentity, SEARCH_REQUEST } from './services';\nimport { getIndex } from './indexModel';\n\nlet lvlDb;\nconst installFilter = (web3) => {\n  const filter = web3.shh.filter({ topics: [SEARCH_REQUEST], to: getIdentity() });\n  filter.watch((err, message) => {\n    const payload = web3.toUtf8(message.payload);\n    let jsonPayload;\n    try{\n      jsonPayload = JSON.parse(payload);\n    }catch (err) {\n      console.log(err);\n    }\n    if(!jsonPayload || !jsonPayload.text){return;}\n    let response = new Set();\n    lvlDb.search({ query: { AND: { '*': [jsonPayload.text] } } })\n      .on('data', (data) => {\n        response.add(data.document.entryId);\n      }).on('end', () => {\n      const results = Array.from(response);\n      //\n    });\n\n    if (!err) {\n      web3.shh\n        .post({\n          from: identity,\n          to: message.from,\n          topics: [SEARCH_REQUEST],\n          payload: message.payload,\n          ttl: web3.fromDecimal(10)\n        }, (error, sent) => {\n          if (sent) {\n            console.log('Handshake done with', message.from);\n          } else {\n            console.error('Handshake error', error);\n          }\n        });\n    }\n  });\n  return null;\n};\n\nexport default function runService () {\n  const web3 = getWeb3();\n\n\n  if(getIdentity()){\n    getIndex((err, resp) => {\n      lvlDb = resp;\n    });\n    return installFilter(web3);\n  }\n\n  web3.shh.newIdentity((err, address) => {\n    console.log('SERVICE IDENTITY ', address);\n    setIdentity(address);\n    return installFilter();\n  });\n}\n"]}